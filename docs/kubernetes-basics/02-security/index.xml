<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2. Securing Kubernetes on Kubernetes Security Training</title><link>/docs/kubernetes-basics/02-security/</link><description>Recent content in 2. Securing Kubernetes on Kubernetes Security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/kubernetes-basics/02-security/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture and encryption</title><link>/docs/kubernetes-basics/02-security/02/_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/kubernetes-basics/02-security/02/_architecture/</guid><description>In order to secure Kubernetes we want to understand its different components. For that we install a minimal kubernetes ourselves:
Task 2.1.1: Install a Kubernetes Cluster For this task we need to switch to a VM, there we will install a Kubernetes Cluster using kind SSH into your VM, you can find the relevant IP in the file welcome
ssh 192.168.66.66 Similiar to kubernetes kind can be configured using a yaml resource, execute the command below to create the file cluster.</description></item><item><title>Custom Policies</title><link>/docs/kubernetes-basics/02-security/02/_custom-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/kubernetes-basics/02-security/02/_custom-policies/</guid><description>Until now we learned best practices on how to secure our workload in kubernetes, but as a cluster admin. How can we enforce certain regulations for resources in our cluster? Sometimes we need to be more specific than the 3 PSP this is where policy engines like Open Policy Agent (OPA) or Kyverno come into play.
Kyverno Kyverno is an open-source policy engine designed specifically for Kubernetes. It allows you to manage and enforce security and compliance policies for your Kubernetes resources using custom resource definitions (CRDs).</description></item><item><title>Runtime Security</title><link>/docs/kubernetes-basics/02-security/02/_runtime-sec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/kubernetes-basics/02-security/02/_runtime-sec/</guid><description>Kubernetes clusters are dynamic, with workloads constantly being scheduled, modified, and removed. While static security measures (e.g., image scanning, Pod Security Policies) focus on vulnerabilities before deployment, runtime security tools like Falco detect threats as they occur.
This includes:
Detecting anomalous behavior (e.g., unexpected process executions in containers). Identifying suspicious network activity (e.g., unexpected connections or port scans). Tracking system calls for unauthorized actions (e.g., privilege escalation attempts). Falco is an open source Kubernetes threat detection engines.</description></item></channel></rss>