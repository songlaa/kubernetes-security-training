<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Secure Workload on Kubernetes Security Training</title><link>/docs/kubernetes-basics/02-secure-workload/</link><description>Recent content in Secure Workload on Kubernetes Security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/kubernetes-basics/02-secure-workload/index.xml" rel="self" type="application/rss+xml"/><item><title>Securing the frontend</title><link>/docs/kubernetes-basics/02-secure-workload/02/_sec-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/kubernetes-basics/02-secure-workload/02/_sec-frontend/</guid><description>Right now we have a fully functioning application, but we want to run it as securely as possible. In Docker, we would make sure to run as an unprivileged user, drop unnecessary capabilities and use a Mandatory Access Control System like AppArmor. Let us apply that to Kubernetes!
In Kubernetes, the SecurityContext defines security-related settings for both Pods and individual Containers. It allows you to control various security aspects of your workloads, such as user permissions, capabilities, and Linux security features (like SELinux, AppArmor, and seccomp).</description></item><item><title>Network Policies</title><link>/docs/kubernetes-basics/02-secure-workload/02/_network-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/kubernetes-basics/02-secure-workload/02/_network-policies/</guid><description>Kubernetes Networking Kubernetes networking is designed to allow communication between various components like pods, services, and external resources. It ensures that containers can interact with each other.
Container Network Interface (CNI) is a specification for network plugins in Kubernetes. It enables the network layer to be abstracted and customized based on the specific requirements of the cluster. CNIs are responsible for configuring networking when a pod is started or terminated. CNI plugins allow Kubernetes clusters to use different networking models or overlay networks, making it possible to scale across diverse environments.</description></item></channel></rss>